type Post {
  id: ID!
  title: String!
  comments(
    filter: ModelCommentFilterInput
    sortDirection: ModelSortDirection
    limit: Int
    nextToken: String
  ): ModelCommentConnection

  mysql_id: Int
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type Comment {
  id: ID!
  postID: ID!
  post: Post
  content: String!

  mysql_id: Int
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type ModelPostConnection {
  items: [Post]
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

input ModelPostFilterInput {
  id: ModelIDInput
  title: ModelStringInput
  mysql_id: ModelIntInput
  and: [ModelPostFilterInput]
  or: [ModelPostFilterInput]
  not: ModelPostFilterInput
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

type Query {
  syncPosts(
    filter: ModelPostFilterInput
    limit: Int
    nextToken: String
    lastSync: AWSTimestamp
  ): ModelPostConnection @function(name: "datastoreLink-${env}")
  syncComments(
    filter: ModelCommentFilterInput
    limit: Int
    nextToken: String
    lastSync: AWSTimestamp
  ): ModelCommentConnection @function(name: "datastoreLink-${env}")
}

input CreatePostInput {
  id: ID
  title: String!
  mysql_id: Int
  _version: Int
}

input UpdatePostInput {
  id: ID!
  title: String
  mysql_id: Int
  _version: Int
}

input DeletePostInput {
  id: ID
  _version: Int
}

type Mutation {
  createPost(input: CreatePostInput!, condition: ModelPostConditionInput): Post
    @function(name: "datastoreLink-${env}")
  updatePost(input: UpdatePostInput!, condition: ModelPostConditionInput): Post
    @function(name: "datastoreLink-${env}")
  deletePost(input: DeletePostInput!, condition: ModelPostConditionInput): Post
    @function(name: "datastoreLink-${env}")
  createComment(
    input: CreateCommentInput!
    condition: ModelCommentConditionInput
  ): Comment @function(name: "datastoreLink-${env}")
  updateComment(
    input: UpdateCommentInput!
    condition: ModelCommentConditionInput
  ): Comment @function(name: "datastoreLink-${env}")
  deleteComment(
    input: DeleteCommentInput!
    condition: ModelCommentConditionInput
  ): Comment @function(name: "datastoreLink-${env}")
}

input ModelPostConditionInput {
  title: ModelStringInput
  mysql_id: ModelIntInput
  and: [ModelPostConditionInput]
  or: [ModelPostConditionInput]
  not: ModelPostConditionInput
}

type Subscription {
  onCreatePost: Post @aws_subscribe(mutations: ["createPost"])
  onUpdatePost: Post @aws_subscribe(mutations: ["updatePost"])
  onDeletePost: Post @aws_subscribe(mutations: ["deletePost"])
  onCreateComment: Comment @aws_subscribe(mutations: ["createComment"])
  onUpdateComment: Comment @aws_subscribe(mutations: ["updateComment"])
  onDeleteComment: Comment @aws_subscribe(mutations: ["deleteComment"])
}

type ModelCommentConnection {
  items: [Comment]
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelCommentFilterInput {
  id: ModelIDInput
  postID: ModelIDInput
  mysql_id: ModelIntInput
  content: ModelStringInput
  and: [ModelCommentFilterInput]
  or: [ModelCommentFilterInput]
  not: ModelCommentFilterInput
}

input CreateCommentInput {
  id: ID
  postID: ID!
  mysql_id: Int
  content: String!
  _version: Int
}

input UpdateCommentInput {
  id: ID!
  postID: ID
  mysql_id: Int
  content: String
  _version: Int
}

input DeleteCommentInput {
  id: ID
  _version: Int
}

input ModelCommentConditionInput {
  postID: ModelIDInput
  mysql_id: ModelIntInput
  content: ModelStringInput
  and: [ModelCommentConditionInput]
  or: [ModelCommentConditionInput]
  not: ModelCommentConditionInput
}

enum ModelSortDirection {
  ASC
  DESC
}
